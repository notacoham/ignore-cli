import os

# Default content for the .gitignore file
DEFAULT_GITIGNORE_CONTENT = """
# Byte-compiled / optimized / DLL files
__pycache__/
*.pyc
*.pyd
*.pyo

# Distribution / packaging
.Python
env/
venv/
*.egg
*.egg-info/
dist/
build/
*.whl

# IDE-specific files
.idea/             # IntelliJ / PyCharm
*.iml              # IntelliJ / PyCharm module files
.vscode/           # VS Code
.vscode-server/    # VS Code remote development
.history/          # Some IDEs' local history

# Operating System files
.DS_Store          # macOS
Thumbs.db          # Windows

# Temporary files, logs, etc.
*.log
*.tmp
*.bak

# Testing
.pytest_cache/
htmlcov/
.coverage

# User-specific configuration (if any sensitive data)
# .env # If you use python-dotenv for environment variables
"""

def format_content(content=None):
    # If no content is provided, sets the default git content
    if content is None:
        content = DEFAULT_GITIGNORE_CONTENT
    
    # Sets the content string with a header
    content_string = """
## Generated .gitignore file
## This file is automatically generated by ignore-cli.
## This package was created by notacoham.

## Python ##
"""
    # Loop through the content dictionary to format it and add it to the content_string
    content_string += "\n## Files ##\n"
    for file_extension in content.get('files', []):
        content_string += f"{file_extension}\n"
    content_string += "\n## Directories ##\n"
    for directory in content.get('directories', []):
        content_string += f"{directory}\n"
    
    return content_string.strip()

def generate_gitignore(directory, content=None):
    # If no content is provided, sets the default git content
    if content is None:
        content = DEFAULT_GITIGNORE_CONTENT

    # Sets the path for the .gitignore file
    gitignore_path = os.path.join(directory, '.gitignore')

    try:        
        # Writes the formatted content to the .gitignore file
        with open(gitignore_path, 'w') as f:
            formatted_content = format_content(content)
            f.write(formatted_content)
        print(f".gitignore file created at {gitignore_path}")
    except IOError as e:
        print(f"Error creating .gitignore file: {e}")